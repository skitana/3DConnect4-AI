
(defun stampajOznake (n)
    (dotimes (k n)
                 (format t "~d " (nth k oznake))
      )
  )

(defun napraviListu (array)
  (let* ((dimensions (array-dimensions array))
           (depth      (1- (length dimensions)))
           (indices    (make-list (1+ depth) :initial-element 0))
         )
    (labels ((recurse (n)
               (loop for j below (nth n dimensions)
                     do (setf (nth n indices) j)
                     collect (if (= n depth)
                                 (apply #'aref array indices)
                                 (recurse (1+ n)))
                  )
               ))
        (recurse 0)
      )
    )
  )
  
(defun blankSpaces (n)
     (if(= n 5)
        (format t "  ")
      )
    (if(= n 6)
        (format t "    ")
      )  
    ) 
(defun printOldie (n lista)
  
  (dotimes (z n)  
    (blankSpaces n)
      (format t "      ~d " (nth (- n 1)(nth (- n 1)(nth z lista))))
    )(fresh-line)
  
  (dotimes (z n)
     (blankSpaces n)
    (format t "    ~d ~d " (nth (- n 1)(nth (- n 2)(nth z lista)))
                           (nth (- n 2)(nth (- n 1)(nth z lista)))
      )
    )(fresh-line)
  
  (dotimes (z n)
    (blankSpaces n)
    (format t "  ~d ~d ~d " (nth (- n 1)(nth (- n 3)(nth z lista)))
                            (nth (- n 2)(nth (- n 2)(nth z lista)))
                            (nth (- n 3)(nth (- n 1)(nth z lista)))
      )
    )(fresh-line) 
  
  (dotimes (z n)
     (blankSpaces n)
    (format t "~d ~d ~d ~d " (nth (- n 1)(nth (- n 4)(nth z lista)))
                             (nth (- n 2)(nth (- n 3)(nth z lista)))
                             (nth (- n 3)(nth (- n 2)(nth z lista)))
                             (nth (- n 4)(nth (- n 1)(nth z lista)))
      )
    )(fresh-line) 
  
  (if(> n 4)
   ((lambda (n lista)   
   (dotimes (z n)
     (if(> n 5)(format t "  "))   
     (format t "~d ~d ~d ~d ~d " (nth (- n 1)(nth (- n 5)(nth z lista)))
                             (nth (- n 2)(nth (- n 4)(nth z lista)))
                             (nth (- n 3)(nth (- n 3)(nth z lista)))
                             (nth (- n 4)(nth (- n 2)(nth z lista)))
                             (nth (- n 5)(nth (- n 1)(nth z lista)))
       )
     )(fresh-line) 
    )n lista))
  
  (if(> n 5)
  ((lambda (n lista)
   (dotimes (z n)  
     (format t "~d ~d ~d ~d ~d ~d " (nth 5 (nth 0 (nth z lista)))
                             (nth 4 (nth 1 (nth z lista)))
                             (nth 3 (nth 2 (nth z lista)))
                             (nth 2 (nth 3 (nth z lista)))
                             (nth 1 (nth 4 (nth z lista)))       
                             (nth 0 (nth 5 (nth z lista)))
         )
     )(fresh-line) 
    (dotimes (z n)   
     (format t "~d ~d ~d ~d ~d   " (nth 4 (nth 0 (nth z lista)))
                             (nth 3 (nth 1 (nth z lista)))
                             (nth 2 (nth 2 (nth z lista)))
                             (nth 1 (nth 3 (nth z lista)))
                             (nth 0 (nth 4 (nth z lista)))
       )
     )(fresh-line) 
    )n lista))
  (if(> n 4)
   ((lambda (n lista)   
   (dotimes (z n)  
     (format t "~d ~d ~d ~d " (nth 3 (nth 0 (nth z lista)))
                             (nth 2 (nth 1 (nth z lista)))
                             (nth 1 (nth 2 (nth z lista)))
                             (nth 0 (nth 3 (nth z lista)))
       )
     (blankSpaces n)
     )(fresh-line) 
   )n lista))
  (dotimes (z n)
    (format t "~d ~d ~d   " (nth 2 (nth 0 (nth z lista)))
                            (nth 1 (nth 1(nth z lista)))
                            (nth 0 (nth 2(nth z lista)))
      )
     (blankSpaces n)
    )(fresh-line)
  
  (dotimes (z n)
    (format t "~d ~d     " (nth 1 (nth 0 (nth z lista)))
                           (nth 0 (nth 1 (nth z lista)))
      )
     (blankSpaces n)
    )(fresh-line) 
  
  (dotimes (z n)
    (format t "~d       " (nth 0 (nth 0 (nth z lista))))
     (blankSpaces n)
    )(fresh-line)
 
)

(defun refresh (n lista)
  
  (dotimes (k (* n n))
      (format t "~d " (nth k oznake))
    )
  (fresh-line)
  (printOldie n lista)
  ;(stampaj n lista)
  
  (dotimes (k (* n n))
      (format t "~d " (nth k oznake))
    )
  (fresh-line)
  )

(defun upisiPotez (i j pom lista)
  (setf (nth pom(nth j(nth i lista))) tip)
  (incf brojPoteza)
  )

(defun upisi (i j pom lista)
  (if(eq (nth pom (nth j (nth i lista))) '-) (upisiPotez i j pom lista)
    (upisi i j (+ 1 pom) lista)
    )
  )

(defun provera (i j n lista)  
  (if(or (> i (- n 1)) (> j (- n 1))) (potez n lista))
  (if(eq (nth (- (length lista) 1) (nth j(nth i lista))) '-) (upisi i j 0 lista)   (potez n lista))
   (if(eq tip 'o)(refresh n lista))
  (if (eq tip 'x) (setf tip 'o)(setf tip 'x))
  (if(= brojPoteza (* n n n))
      (progn
        (refresh n lista)
        (fresh-line)
        (format t "Kraj igre. Igrac ~d je zavrsio igru." prvi)
        (fresh-line)
        (start n))
       (potez n lista))
)

(defun potez (n lista)
  (if(eq tip 'x)
  (progn
    (format t "~d ~d~d~%" "Potez" tip ":")
    (provera (read)(read) (length lista) lista))
    (progn
      (provera (+ 0 (random (eength lista))) (+ 0 (random (length lista))) (length lista) lista)
      )
  ))

(defun start (n)
  (setq oznake '(0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z))
  (setf tip 'x)
  (princ "Player name: " )(setq prvi (read))
  (setq brojPoteza 0)
  (defparameter niz
     (make-array (list n n n)
         :element-type 'char
         :initial-element '-)
       )
  (setq lista(napraviListu niz))
     
   ;(refresh n)
  (potez n lista)
  ;(makunbound lista)
  )
